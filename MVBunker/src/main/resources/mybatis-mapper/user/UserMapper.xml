<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nurim.mvbunker.user.UserMapper">
    <insert id="insUser" useGeneratedKeys="true" >
        INSERT INTO t_user
        (uid, ex_key, provider, upw, unm, age, unn, profileImg, auth)
        VALUES
        (#{uid}, #{ex_key}, #{provider}, #{upw}, #{unm}, ${age}, #{unn}, #{profileImg}, #{auth})
    </insert>
    <update id="authUser">
        UPDATE t_user
        SET auth = null
        WHERE uid = #{uid} AND auth = #{auth}
    </update>
    <select id="selUser" resultType="UserEntity">
        SELECT *
        FROM t_user
        WHERE uid = #{uid} AND auth IS NULL AND provider = #{provider}
    </select>

    <delete id="delUser">
        delete from t_user
        where uid = #{uid} and upw = #{upw}
    </delete>

    <update id="updUser">
        UPDATE t_user
        <set>
            <if test="upw != null and upw != ''">
               , upw = #{upw}
            </if>
            <if test="unn != null and unn != ''">
               , unn = #{unn}
            </if>
            <if test="introduce != null and introduce != ''">
               , introduce = #{introduce}
            </if>
            <if test="profileImg != null and profileImg != ''">
                , profileImg = #{profileImg}
            </if>
        </set>
        WHERE i_user = #{i_user}
    </update>

    <!-- Detail : 내가 작성한 리뷰 수 / 내가 작성한 댓글 수 / 받은 좋아요 총합(리뷰) 띄우기 -->
    <select id="selUserProfile" resultType="UserDomain">
        select A.i_user as i_user,
               count(distinct B.i_review) as countMyReview,
               count(case when C.disLike =0 then 0 end) as countMyReviewLike,
               ifnull(D.i_cmt, 0) as countMyReview_cmt
        from
                ( select i_user from t_user) A
            left join
                ( select i_user, i_review from t_review ) B
            on A.i_user = B.i_user
            left join
                ( select i_review, disLike from t_review_like where disLike is not null) C
            on B.i_review = C.i_review
            left JOIN
                ( select distinct i_user, count(i_cmt)as i_cmt from t_review_cmt)D
            on A.i_user = D.i_user
        where A.i_user = #{i_user};
    </select>

    <!-- 작성한 리뷰 목록 띄우기 + 각 평가기준 별 평점-->
    <!-- 정렬 : (default)최신순=orderby 0  |  좋아요 많은 순=orderby1 -->
    <select id="selReviewList" resultType="ReviewDomain">
        select R.unn as unn, R.i_user as i_user, R.i_review as i_review, R.title as title, R.id as id, R.poster as poster, R.regdt as regdt, R.re_ctnt as re_ctnt, R.profileImg as profileImg,
               coalesce(round((E.production+E.performance+E.visual_beauty+E.music+E.plot)/5, 3),
                   round((E.performance+E.visual_beauty+E.music+E.plot)/4,3),
                   round((E.production+E.visual_beauty+E.music+E.plot)/4, 3),
                   round((E.production+E.performance+E.music+E.plot)/4, 3),
                   round((E.production+E.performance+E.visual_beauty+E.plot)/4, 3),
                   round((E.production+E.performance+E.visual_beauty+E.music)/4, 3)
                       )as totalAvg_Review,
               count(case when RL.disLike = 0 then 1 end) as review_like_cnt,
               count(case when RL.disLike = 1 then 1 end) as review_disLike_cnt
        from(
                select B.unn as unn, B.profileImg as profileImg, A.i_user as i_user, A.i_review as i_review, A.title as title, A.id as id, A.poster As poster, A.regdt as regdt, A.re_ctnt as re_ctnt
                from t_review A
                         left join t_user B
                                   on A.i_user = B.i_user
            )R
                left join t_eval E
                          on R.id = E.id and R.i_user = E.i_user
                left join t_review_like RL
                          on R.i_review = RL.i_review
        where R.i_user = ${param.i_user}
        group by R.i_review
        <choose>
            <when test="pagingDTO.orderby == 0">
                order by R.i_review;
            </when>
            <when test="pagingDTO.orderby == 1">
                order by review_like_cnt desc;
            </when>
        </choose>
    </select>

    <!-- 구독 -->
    <insert id="insSub">
        INSERT INTO t_sub
            (sub_ing_user, sub_ed_user)
        VALUES
            (#{sub_ing_user}, #{sub_ed_user});
    </insert>
    <delete id="delSub">
        DELETE t_sub FROM t_sub WHERE sub_ing_user = #{sub_ing_user} and sub_ed_user = #{sub_ed_user};
    </delete>
    <select id="chkSub" resultType="Integer">
        SELECT COUNT(*) FROM t_sub WHERE sub_ing_user = ${sub_ing_user} and sub_ed_user = ${sub_ed_user};
    </select>

    <!-- 내가 구독한 유저목록 띄우기 -->
    <select id="mySubUser" resultType="UserDomain">
        SELECT A.unn AS unn, A.profileImg AS profileImg, A.regdt AS regdt, A.introduce AS introduce,
               B.sub_ed_user as i_user
        FROM t_user A
                 INNER JOIN t_sub B
                            ON A.i_user = B.sub_ed_user
        WHERE B.sub_ing_user = #{i_user};
    </select>

    <!-- Following Reviewer Detail - 내가 팔로우한 유저의 프로필 + 작성한 리뷰&팔로워&받은 좋아요 수 -->
    <select id="subUserProfile" resultType="UserDomain">
        select C.i_user as i_user, C.unn as unn, C.profileImg as profileImg, C.introduce as introduce, C.regdt as regdt, ifnull(count(C.countMyReview), 0) as countMyReview,
               ifnull(F.countMyReview_cmt,0) as countMyReview_cmt
        from (
                 select A.i_user as i_user, A.unn as unn, A.profileImg As profileImg, A.introduce as introduce, A.regdt as regdt,
                        B.i_review as countMyReview
                 from t_user A
                          left join t_review B
                                    on A.i_user = B.i_user
             ) C
                 left join(
            select i_user as i_user, count(i_review) as countMyReview_cmt
            from t_review_cmt
        ) F
                          on C.i_user = F.i_user
        where C.i_user = #{i_user};
    </select>

    <!-- 내가 찜한 영화 -->
    <select id="selIsFav" resultType="Integer">
        SELECT COUNT(*)
        FROM t_movie_fav
        WHERE id = ${id} AND i_user = ${i_user}
    </select>
    <insert id="insFavMovie">
        insert into t_movie_fav
        (id, i_user)
        values
        (#{id}, #{i_user})
    </insert>

    <delete id="delFavMovie">
        delete from t_movie_fav where id = #{id} and i_user = #{i_user};
    </delete>

    <select id="selFavMovieList" resultType="MovieDomain"><!-- hover 시 띄워 줄 정보는 제외하고! -->
        select A.posterPath as posterPath, A.id as id, A.title as title, A.originalTitle as originalTitle, A.backdropPath as backdropPath, A.posterPath as posterPath, A.releaseDate as releaseDate, A.adult as adult, A.overview as overview, A.originalLanguage as originalLanguage, A.popularity as popularity, A.mainGenre as mainGenre
        from t_movies A
                 left join t_movie_fav B
                           on A.id = B.id
        where B.i_user = ${i_user}
        order by B.id desc;
    </select>

    <!-- 좋아요 누른 리뷰 목록 띄우기 -->
    <select id="selLikeReviews" resultType="ReviewDomain">
        select D.i_review as i_review, D.id as id, D.title as title, D.re_ctnt as re_ctnt, D.regdt as regdt, D.i_user as i_user, D.unn as unn, D.profileImg as profileImg, D.poster as poster,
               ifnull(coalesce(round((E.production+E.performance+E.visual_beauty+E.music+E.plot)/5, 3),
                               round((E.performance+E.visual_beauty+E.music+E.plot)/4,3),
                               round((E.production+E.visual_beauty+E.music+E.plot)/4, 3),
                               round((E.production+E.performance+E.music+E.plot)/4, 3),
                               round((E.production+E.performance+E.visual_beauty+E.plot)/4, 3),
                               round((E.production+E.performance+E.visual_beauty+E.music)/4, 3)
                          ), 0) as totalAvg_Review
        from
            (
                select i_review, disLike, i_user
                from t_review_like
            ) A
                left join
            (
                select B.i_review as i_review, B.id as id, B.title as title, B.regdt as regdt, B.re_ctnt as re_ctnt, B.i_user as i_user, B.poster as poster,
                       C.unn as unn, C.profileImg as profileImg
                from t_review B
                         left join t_user C
                                   on B.i_user = C.i_user
            )D
            on A.i_review = D.i_review
                left join t_eval E
                          on D.id = E.id and D.i_user = E.i_user
        where  A.i_user = ${param.i_user} and A.disLike = 0;
    </select>
</mapper>