<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nurim.mvbunker.user.UserMapper">

    <!-- 리뷰 작성 후 DB에 저장 -->
    <insert id="insReview">
        insert into t_review
            ( i_user, id, re_ctnt)
        values
            ( #{i_user}, #{id}, #{re_ctnt} )
    </insert>

    <!-- 전체리뷰목록 - default=최신순 -->
    <select id="selAllReview" resultType="ReviewDomain">
        select A.*, COUNT(CASE WHEN B.disLike = 0 THEN 1 END) AS review_like_cnt,
               COUNT(CASE WHEN B.disLike = 1 THEN 1 END) AS review_dislike_cnt,
               COUNT(C.i_cmt) AS review_cmt_cnt
        from t_review A
        left join t_review_like B
        on A.i_review = B.i_review
        left join t_review_cmt C
        on A.i_review = C.i_review
        order by A.i_review DESC;
    </select>
    
    <!-- 그 영화의 리뷰들 - default가 좋아요 순 -->
    <select id="selReview" resultType="ReviewDomain">
        SELECT A.*, COUNT(CASE WHEN B.disLike = 0 THEN 1 END) AS review_like_cnt,
               COUNT(CASE WHEN B.disLike = 1 THEN 1 END) AS review_dislike_cnt,
               COUNT(C.i_cmt) AS review_cmt_cnt
        FROM t_review A
        LEFT JOIN t_review_like B
        ON A.i_review = B.i_review
        LEFT JOIN t_review_cmt C
        ON A.i_review = C.i_review
        WHERE A.id = ${id}
        ORDER BY review_like_cnt DESC;
    </select>

    <!-- 그 영화의 리뷰들 - 최신순-->
    <select id="selReview_desc" resultType="ReviewDomain">
        SELECT A.*, COUNT(CASE WHEN B.disLike = 0 THEN 1 END) AS review_like_cnt,
               COUNT(CASE WHEN B.disLike = 1 THEN 1 END) AS review_dislike_cnt,
               COUNT(C.i_cmt) AS review_cmt_cnt
        FROM t_review A
                 LEFT JOIN t_review_like B
                           ON A.i_review = B.i_review
                 LEFT JOIN t_review_cmt C
                           ON A.i_review = C.i_review
        WHERE A.id = ${id}
        order by A.i_review DESC;
    </select>

    <!-- 그 영화의 리뷰들 - 과거순 -->
    <select id="selReview_asc" resultType="ReviewDomain">
        SELECT A.*, COUNT(CASE WHEN B.disLike = 0 THEN 1 END) AS review_like_cnt,
               COUNT(CASE WHEN B.disLike = 1 THEN 1 END) AS review_dislike_cnt,
               COUNT(C.i_cmt) AS review_cmt_cnt
        FROM t_review A
                 LEFT JOIN t_review_like B
                           ON A.i_review = B.i_review
                 LEFT JOIN t_review_cmt C
                           ON A.i_review = C.i_review
        WHERE A.id = ${id}
        order by A.i_review;
    </select>

    <update id="updReview">
        update t_review
        set re_ctnt = ${re_ctnt}
        where i_user = #{i_user} and id = #{id}
    </update>

    <delete id="delReview">
       delete from t_review
        where i_user = #{i_user} and id = #{id}
    </delete>

    <!-- 평가 -->
    <insert id="insEval">
        INSERT INTO t_eval
        (i_user, id, production, performance, visual_beauty, music, plot)
        VALUES
        (${i_user}, ${id}, ${production}, ${performance}, ${visual_beauty}, ${music}, ${plot})
    </insert>
    <select id="selEval" resultType="EvalEntity">
        SELECT AVG(production) AS production, AVG(performance) AS performance, AVG(visual_beauty) AS visual_beauty
        , AVG(music) AS music, AVG(plot) AS plot
        FROM t_eval
        WHERE id = ${id}
    </select>
    <select id="selMyEval" resultType="EvalEntity">
        SELECT *
        FROM t_eval
        WHERE id = ${id} AND i_user = ${i_user}
    </select>
    <update id="updEval">
        UPDATE t_eval
        SET production = ${production}, performance = ${performance}, visual_beauty = ${visual_beauty}
          , music = ${music}, plot = ${plot}
        WHERE i_user = ${i_user} AND id = ${id}
    </update>

<!--    <select id="selMovieEval" resultType="EvalEntity">-->

<!--    </select>-->




</mapper>