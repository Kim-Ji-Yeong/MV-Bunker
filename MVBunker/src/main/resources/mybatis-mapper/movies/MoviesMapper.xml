<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nurim.mvbunker.movies.MoviesMapper">


    <insert id="insOriginGenres">
        INSERT IGNORE INTO t_genres (genreId, genreName)
        VALUES (${genreId}, #{genreName})
    </insert>

    <insert id="insMovies">
        INSERT INTO t_movies
        (id, title, originalTitle, backdropPath, posterPath, releaseDate, adult, overview, originalLanguage, popularity, mainGenre)
        VALUES
        (${id}, #{title}, #{originalTitle}, #{backdropPath}, #{posterPath}, #{releaseDate}, #{adult}, #{overview}, #{originalLanguage}, #{popularity}, ${mainGenre})
        ON DUPLICATE KEY UPDATE popularity = VALUES(popularity)
    </insert>
    <insert id="insMoviesGenre">
        INSERT IGNORE INTO t_movie_genres (id, genreId)
        VALUES 
        <foreach collection="list" item="item" separator=",">
            (${item.id}, #{item.genreId})
        </foreach>
    </insert>

    <resultMap id="getMovieDomain" type="MovieDomain">
        <result property="id" column="id"/>
        <collection property="genres" column="id" ofType="GenreEntity" javaType="ArrayList" select="selMovieGenre"/>
    </resultMap>
    <select id="selMovieGenre" resultType="GenreEntity">
        SELECT genreId, genreName FROM t_movie_genre_set WHERE id = ${id}
    </select>

    <select id="selPopMovies" resultMap="getMovieDomain">
        SELECT A.*, AVG(B.production) AS production, AVG(B.performance) AS performance,
               AVG(B.visual_beauty) AS visual_beauty, AVG(B.music) AS music, AVG(B.plot) AS plot
        FROM t_movies A
        LEFT JOIN t_eval B
        ON A.id = B.id
        GROUP BY A.id
        ORDER BY MAX(A.popularity) DESC
        LIMIT 10
    </select>

    <select id="selMultiGenreMovies" resultMap="getMovieDomain">
        SELECT A.*, AVG(B.production) AS production, AVG(B.performance) AS performance,
               AVG(B.visual_beauty) AS visual_beauty, AVG(B.music) AS music, AVG(B.plot) AS plot
        FROM t_movies A
                 LEFT JOIN t_eval B
                           ON A.id = B.id
                 LEFT JOIN t_movie_genres C
                           ON A.id = C.id
        WHERE A.mainGenre = ${genreId}
        GROUP BY A.id
        ORDER BY MAX(A.popularity) DESC
            LIMIT 10
    </select>

<!--    <select id="selGenreMovies" resultMap="getMovieDomain">-->
    <select id="selGenreMovies" resultType="MovieDomain">
        SELECT A.*, AVG(B.production) AS production, AVG(B.performance) AS performance,
               AVG(B.visual_beauty) AS visual_beauty, AVG(B.music) AS music, AVG(B.plot) AS plot
        FROM t_movies A
        LEFT JOIN t_eval B
        ON A.id = B.id
        LEFT JOIN t_movie_genres C
        ON A.id = C.id
        WHERE C.genreId = ${genreId}
        GROUP BY A.id
        ORDER BY MAX(A.popularity) DESC
        LIMIT ${pagingDTO.minIndex}, ${pagingDTO.listLength}
    </select>

    <select id="selTheMovie" resultType="MovieDomain">
        SELECT A.*, AVG(B.production) AS production, AVG(B.performance) AS performance,
               AVG(B.visual_beauty) AS visual_beauty, AVG(B.music) AS music, AVG(B.plot) AS plot
        FROM t_movies A
                 LEFT JOIN t_eval B
                           ON A.id = B.id
                 LEFT JOIN t_movie_genres C
                           ON A.id = C.id
        WHERE A.id = ${id}
    </select>

    <select id="selSearchMovies" resultType="MovieDomain">
        SELECT A.*, AVG(B.production) AS production, AVG(B.performance) AS performance,
               AVG(B.visual_beauty) AS visual_beauty, AVG(B.music) AS music, AVG(B.plot) AS plot
        FROM t_movies A
                 LEFT JOIN t_eval B
                           ON A.id = B.id
                 LEFT JOIN t_movie_genres C
                           ON A.id = C.id
        WHERE A.id IN
        <foreach collection="movieIds" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
        GROUP BY A.id
        ORDER BY MAX(A.popularity) DESC
        LIMIT 20
    </select>

    <!-- Hover! -->
    <!-- selHover1 - 장르에서 띄워 줄 정보 -->
    <!-- mF_exist = 해당영화를 좋아요 했는지 여부, R_exist = 이 영화에 대한 리뷰작성여부, totalAvg_Movie = 해당 영화에 대한 총 평점평균-->
    <select id="selHover1" resultType="HoverVO">
        select A.title as title, A.id as id, A.releaseDate as releaseDate,
               MF.exist as mF_exist, R.exist as R_exist,
               (select round((avg(production)+avg(performance)+avg(visual_beauty)+avg(music)+avg(plot))/5, 3)
                from t_eval where id = ${id})as totalAvg_Movie
        from t_movies A
                 left join(
            select id,i_user,exists(select i_user, id from t_movie_fav where i_user = ${i_user} and id=${id})as exist
            from t_movie_fav
        )MF
                          on A.id = MF.id
                 left join(
            select i_user, id, exists(select i_user, id from t_review where i_user = ${i_user} and id=${id})as exist
            from t_review
        )R
                          on A.id = R.id
        where A.id = ${id}
        group by A.id;
    </select>

    <!-- selHover2 - 내가 찜한 영화, 리뷰목록에서 hover했을 때 띄워 줄 정보 -->
    <!-- 이 영화를 좋아요 했는지 여부, 해당 리뷰에 대한 좋아요/싫어요 여부, -->
    <select id="selHover2" resultType="HoverVO">
        select A.title as title, A.id as id, A.releaseDate as releaseDate,
               MF.exist as mF_exist,
               (select disLike from t_review_like where i_user = ${i_user} and i_review = ${i_review})as R_disLike,
               round((E.production+E.performance+E.visual_beauty+E.music+E.plot)/5,3) AS totalAvg_Movie
        from t_movies A
                 left join(
            select id,i_user,exists(select i_user, id from t_movie_fav where i_user = ${i_user} and id=${id})as exist
            from t_movie_fav
        )MF
                          on A.id = MF.id
                 left join(
            SELECT id, AVG(production) AS production, AVG(performance) AS performance, AVG(visual_beauty) AS visual_beauty
                 , AVG(music) AS music, AVG(plot) AS plot
            FROM t_eval
            where id = ${id}
        )E
                          on A.id = E.id
        where A.id=${id}
        group by A.id;
    </select>

    <!-- Recommendation -->
    <!-- 추천영화 목록 정렬기준 별 -->
    <!-- selRcmList_fav = 좋아요 많은 순-->
    <select id="selRcmList_fav" resultType="MovieDomain">
    select A.id, count(A.id)as cnt
        from t_movie_fav A
        left join t_movies B
            on A.id = B.id
        group by A.id
        having cnt > 0;
    </select>

    <!-- selRcmList_revw = 리뷰많은 순 -->
    <select id="selRcmList_revw" resultType="MovieDomain">
        select count(A.i_review)as i_review_cnt,
               B.*
        from t_review A
                 left join t_movies B
                           on A.id = B.id
        group by id
        having i_review_cnt > 0;
    </select>
</mapper>