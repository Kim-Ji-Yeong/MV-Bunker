<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nurim.mvbunker.review.ReviewMapper">

    <!-- 리뷰 작성 후 DB에 저장 -->
    <insert id="insReview">
        insert into t_review
        (id, i_user, re_ctnt,title, originalTitle, backdropPath, posterPath, releaseDate, adult, overview, originalLanguage, popularity, mainGenre)
        VALUES
            (
             #{id}, #{i_user}, #{re_ctnt},
             (SELECT title FROM t_movies WHERE id=#{id}),
             (SELECT originalTitle FROM t_movies WHERE id=#{id}),
             (SELECT backdropPath FROM t_movies WHERE id=#{id}),
             (SELECT posterPath FROM t_movies WHERE id=#{id}),
             (SELECT releaseDate FROM t_movies WHERE id=#{id}),
             (SELECT adult FROM t_movies WHERE id=#{id}),
             (SELECT overview FROM t_movies WHERE id=#{id}),
             (SELECT originalLanguage FROM t_movies WHERE id=#{id}),
             (SELECT popularity FROM t_movies WHERE id=#{id}),
             (SELECT mainGenre FROM t_movies WHERE id=#{id}))
            );
    </insert>

    <!-- 전체리뷰 - default=최신순 >>> 수정 필요!! -->
    <select id="selAllReviewCount" resultType="ReviewDomain">
        select A.*, COUNT(CASE WHEN B.disLike = 0 THEN 1 END) AS review_like_cnt,
               COUNT(CASE WHEN B.disLike = 1 THEN 1 END) AS review_dislike_cnt,
               COUNT(C.i_cmt) AS review_cmt_cnt
        from t_review A
        left join t_review_like B
        on A.i_review = B.i_review
        left join t_review_cmt C
        on A.i_review = C.i_review
        <choose>
        <when test="orderby == 0">
            order by A.i_review DESC
        </when>
        <when test="orderby == 1">
            order by review_like_cnt DESC
        </when>
        <when test="orderby == 2">
            order by A.i_review
        </when>
        </choose>
        LIMIT ${minIndex}, ${maxIndex};
    </select>

    <!-- 전체리뷰 목록 - default=최신순 -->
    <select id="selAllReview" resultType="reviewDomain">
        select A.*, B.releaseDate from t_review A
        left join t_movies B
        on A.id = B.id
        order by count(case when )
    </select>
    
    <!-- 그 영화의 리뷰들 - default가 좋아요 순
    orderby == 1 : 최신순, == 2 : 과거순 -->
    <select id="selReview" resultType="ReviewDomain">
        SELECT A.*, (select (COUNT(CASE WHEN B.disLike = 0 THEN 1 END)) AS review_like_cnt,
               (select COUNT(CASE WHEN B.disLike = 1 THEN 1 END)) AS review_dislike_cnt,
               COUNT(B.i_cmt) AS review_cmt_cnt
        FROM t_review A
        LEFT JOIN t_review_cmt B
        ON A.i_review = B.i_review
        WHERE A.id = ${id}
        <choose>
        <when test="orderby == 0">
            ORDER BY review_like_cnt DESC;
        </when>
        <when test="orderby == 1">
            order by A.i_review DESC;
        </when>
        <when test="orderby == 2">
            order by A.i_review;
        </when>
        </choose>
    </select>

    <update id="updReview">
        update t_review
        set re_ctnt = ${re_ctnt}
        where i_user = #{i_user} and id = #{id}
    </update>

    <delete id="delReview">
       delete from t_review
        where i_user = #{i_user} and id = #{id}
    </delete>

    <!-- 내가 작성한 리뷰 목록, default가 좋아요 많은 순! -->
    <select id="selMyReview" resultType="ReviewDomain">
        select *
        from t_review
        where i_user = ${i_user}
    </select>

    <!-- 평가 -->
    <insert id="insEval">
        INSERT INTO t_eval
        (i_user, id, production, performance, visual_beauty, music, plot)
        VALUES
        (${i_user}, ${id}, IF(${production}=0, NULL, ${production}),
         IF(${performance}=0, NULL, ${performance}),
         IF(${visual_beauty}=0, NULL, ${visual_beauty}),
         IF(${music}=0, NULL, ${music}), IF(${plot}=0, NULL, ${plot}))
        ON DUPLICATE KEY UPDATE production = IF(${production}=0, NULL, ${production}), performance = IF(${performance}=0, NULL, ${performance}),
                                visual_beauty = IF(${visual_beauty}=0, NULL, ${visual_beauty}),
                                music = IF(${music}=0, NULL, ${music}), plot = IF(${plot}=0, NULL, ${plot})
    </insert>
    <select id="selEval" resultType="EvalEntity">
        SELECT AVG(production) AS production, AVG(performance) AS performance, AVG(visual_beauty) AS visual_beauty
        , AVG(music) AS music, AVG(plot) AS plot
        FROM t_eval
        WHERE id = ${id}
    </select>
    <select id="selMyEval" resultType="EvalEntity">
        SELECT *
        FROM t_eval
        WHERE id = ${id} AND i_user = ${i_user}
    </select>

<!--    <select id="selMovieEval" resultType="EvalEntity">-->

<!--    </select>-->

    <!-- 댓글 -->
    <insert id="insReviewCmt">
        INSERT INTO t_review_cmt
            (i_review, i_user, cmt)
        VALUES
            (#{i_review}, #{i_user}, #{cmt});
    </insert>

    <delete id="delReviewCmt">
        DELETE FROM t_review_cmt WHERE i_review = #{i_review} and i_user = #{i_user};
    </delete>

    <update id="updReviewCmt">
        UPDATE t_review_cmt SET cmt=#{cmt} where i_cmt = ${i_cmt} and i_user = #{i_user};
    </update>
    
    <select id="selRivewCmt" resultType="ReviewCmtEntity">
        SELECT A.*
        FROM (
                 SELECT
                     A.i_cmt, A.cmt, A.regdt, A.i_review,
                         B.unn
                 FROM t_review_cmt A
                          INNER JOIN t_user B
                                     ON A.i_user = B.i_user
                 WHERE A.i_review = #{i_review}
                 ORDER BY i_cmt ASC) A
        GROUP BY A.i_cmt;
    </select>
</mapper>